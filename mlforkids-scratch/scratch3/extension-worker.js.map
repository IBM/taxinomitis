{"version":3,"file":"extension-worker.js","sources":["webpack://GUI/webpack/bootstrap","webpack://GUI/./node_modules/scratch-vm/src/extension-support/extension-worker.js","webpack://GUI/./node_modules/scratch-vm/node_modules/microee/index.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/common/filter.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/common/minilog.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/common/transform.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/array.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/console.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/formatters/color.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/formatters/minilog.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/formatters/util.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/index.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/jquery_simple.js","webpack://GUI/./node_modules/scratch-vm/node_modules/minilog/lib/web/localstorage.js","webpack://GUI/./node_modules/scratch-vm/src/dispatch/shared-dispatch.js","webpack://GUI/./node_modules/scratch-vm/src/dispatch/worker-dispatch.js","webpack://GUI/./node_modules/scratch-vm/src/extension-support/argument-type.js","webpack://GUI/./node_modules/scratch-vm/src/extension-support/block-type.js","webpack://GUI/./node_modules/scratch-vm/src/extension-support/target-type.js","webpack://GUI/./node_modules/scratch-vm/src/mlforkids-components/images/index.js","webpack://GUI/./node_modules/scratch-vm/src/mlforkids-components/regression/index.js","webpack://GUI/./node_modules/scratch-vm/src/mlforkids-components/sound/index.js","webpack://GUI/./node_modules/scratch-vm/src/mlforkids-components/storage/index.js","webpack://GUI/./node_modules/scratch-vm/src/mlforkids-components/tensorflow/index.js","webpack://GUI/./node_modules/scratch-vm/src/util/log.js","webpack://GUI/(webpack)/buildin/global.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/babel-loader/lib/index.js?!./node_modules/scratch-vm/src/extension-support/extension-worker.js\");\n","/* eslint-env worker */\n\nconst ArgumentType = require('../extension-support/argument-type');\nconst BlockType = require('../extension-support/block-type');\nconst dispatch = require('../dispatch/worker-dispatch');\nconst TargetType = require('../extension-support/target-type');\n\nclass ExtensionWorker {\n    constructor () {\n        this.nextExtensionId = 0;\n\n        this.initialRegistrations = [];\n\n        this.extensionURL = null;\n\n        dispatch.waitForConnection.then(() => {\n            dispatch.call('extensions', 'allocateWorker').then(x => {\n                const [id, extension] = x;\n                this.workerId = id;\n\n                console.log('[mlforkids] ExtensionWorker ' + extension);\n\n                if (extension.indexOf('http') === 0) {\n                    console.log('[mlforkids] Extension from remote URL : ' + extension);\n                    this.extensionURL = extension;\n                }\n                else {\n                    console.log('[mlforkids] Skipping built-in extension : ' + extension);\n                    this.extensionURL = extension;\n                    return dispatch.call('extensions', 'onWorkerInit', id);\n                }\n\n                try {\n                    importScripts(extension);\n\n                    const initialRegistrations = this.initialRegistrations;\n                    this.initialRegistrations = null;\n\n                    Promise.all(initialRegistrations).then(() => dispatch.call('extensions', 'onWorkerInit', id));\n                } catch (e) {\n                    dispatch.call('extensions', 'onWorkerInit', id, e);\n\n                    if (postMessage && e.name === 'NetworkError' && extension.indexOf('extension3.js') > 0) {\n                        postMessage({ mlforkids : 'mlforkids-extension-help' });\n                    }\n                }\n            });\n        });\n\n        this.extensions = [];\n    }\n\n    register (extensionObject) {\n        const extensionId = this.nextExtensionId++;\n        this.extensions.push(extensionObject);\n        const serviceName = `extension.${this.workerId}.${extensionId}`;\n        const promise = dispatch.setService(serviceName, extensionObject)\n            .then(() => dispatch.call('extensions', 'registerExtensionService', serviceName, this.extensionURL));\n        if (this.initialRegistrations) {\n            this.initialRegistrations.push(promise);\n        }\n        return promise;\n    }\n}\n\nglobal.Scratch = global.Scratch || {};\nglobal.Scratch.ArgumentType = ArgumentType;\nglobal.Scratch.BlockType = BlockType;\nglobal.Scratch.TargetType = TargetType;\n\n/**\n * Expose only specific parts of the worker to extensions.\n */\nconst extensionWorker = new ExtensionWorker();\nglobal.Scratch.extensions = {\n    register: extensionWorker.register.bind(extensionWorker)\n};\n","function M() { this._events = {}; }\nM.prototype = {\n  on: function(ev, cb) {\n    this._events || (this._events = {});\n    var e = this._events;\n    (e[ev] || (e[ev] = [])).push(cb);\n    return this;\n  },\n  removeListener: function(ev, cb) {\n    var e = this._events[ev] || [], i;\n    for(i = e.length-1; i >= 0 && e[i]; i--){\n      if(e[i] === cb || e[i].cb === cb) { e.splice(i, 1); }\n    }\n  },\n  removeAllListeners: function(ev) {\n    if(!ev) { this._events = {}; }\n    else { this._events[ev] && (this._events[ev] = []); }\n  },\n  listeners: function(ev) {\n    return (this._events ? this._events[ev] || [] : []);\n  },\n  emit: function(ev) {\n    this._events || (this._events = {});\n    var args = Array.prototype.slice.call(arguments, 1), i, e = this._events[ev] || [];\n    for(i = e.length-1; i >= 0 && e[i]; i--){\n      e[i].apply(this, args);\n    }\n    return this;\n  },\n  when: function(ev, cb) {\n    return this.once(ev, cb, true);\n  },\n  once: function(ev, cb, when) {\n    if(!cb) return this;\n    function c() {\n      if(!when) this.removeListener(ev, c);\n      if(cb.apply(this, arguments) && when) this.removeListener(ev, c);\n    }\n    c.cb = cb;\n    this.on(ev, c);\n    return this;\n  }\n};\nM.mixin = function(dest) {\n  var o = M.prototype, k;\n  for (k in o) {\n    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);\n  }\n};\nmodule.exports = M;\n","// default filter\nvar Transform = require('./transform.js');\n\nvar levelMap = { debug: 1, info: 2, warn: 3, error: 4 };\n\nfunction Filter() {\n  this.enabled = true;\n  this.defaultResult = true;\n  this.clear();\n}\n\nTransform.mixin(Filter);\n\n// allow all matching, with level >= given level\nFilter.prototype.allow = function(name, level) {\n  this._white.push({ n: name, l: levelMap[level] });\n  return this;\n};\n\n// deny all matching, with level <= given level\nFilter.prototype.deny = function(name, level) {\n  this._black.push({ n: name, l: levelMap[level] });\n  return this;\n};\n\nFilter.prototype.clear = function() {\n  this._white = [];\n  this._black = [];\n  return this;\n};\n\nfunction test(rule, name) {\n  // use .test for RegExps\n  return (rule.n.test ? rule.n.test(name) : rule.n == name);\n};\n\nFilter.prototype.test = function(name, level) {\n  var i, len = Math.max(this._white.length, this._black.length);\n  for(i = 0; i < len; i++) {\n    if(this._white[i] && test(this._white[i], name) && levelMap[level] >= this._white[i].l) {\n      return true;\n    }\n    if(this._black[i] && test(this._black[i], name) && levelMap[level] <= this._black[i].l) {\n      return false;\n    }\n  }\n  return this.defaultResult;\n};\n\nFilter.prototype.write = function(name, level, args) {\n  if(!this.enabled || this.test(name, level)) {\n    return this.emit('item', name, level, args);\n  }\n};\n\nmodule.exports = Filter;\n","var Transform = require('./transform.js'),\n    Filter = require('./filter.js');\n\nvar log = new Transform(),\n    slice = Array.prototype.slice;\n\nexports = module.exports = function create(name) {\n  var o   = function() { log.write(name, undefined, slice.call(arguments)); return o; };\n  o.debug = function() { log.write(name, 'debug', slice.call(arguments)); return o; };\n  o.info  = function() { log.write(name, 'info',  slice.call(arguments)); return o; };\n  o.warn  = function() { log.write(name, 'warn',  slice.call(arguments)); return o; };\n  o.error = function() { log.write(name, 'error', slice.call(arguments)); return o; };\n  o.log   = o.debug; // for interface compliance with Node and browser consoles\n  o.suggest = exports.suggest;\n  o.format = log.format;\n  return o;\n};\n\n// filled in separately\nexports.defaultBackend = exports.defaultFormatter = null;\n\nexports.pipe = function(dest) {\n  return log.pipe(dest);\n};\n\nexports.end = exports.unpipe = exports.disable = function(from) {\n  return log.unpipe(from);\n};\n\nexports.Transform = Transform;\nexports.Filter = Filter;\n// this is the default filter that's applied when .enable() is called normally\n// you can bypass it completely and set up your own pipes\nexports.suggest = new Filter();\n\nexports.enable = function() {\n  if(exports.defaultFormatter) {\n    return log.pipe(exports.suggest) // filter\n              .pipe(exports.defaultFormatter) // formatter\n              .pipe(exports.defaultBackend); // backend\n  }\n  return log.pipe(exports.suggest) // filter\n            .pipe(exports.defaultBackend); // formatter\n};\n\n","var microee = require('microee');\n\n// Implements a subset of Node's stream.Transform - in a cross-platform manner.\nfunction Transform() {}\n\nmicroee.mixin(Transform);\n\n// The write() signature is different from Node's\n// --> makes it much easier to work with objects in logs.\n// One of the lessons from v1 was that it's better to target\n// a good browser rather than the lowest common denominator\n// internally.\n// If you want to use external streams, pipe() to ./stringify.js first.\nTransform.prototype.write = function(name, level, args) {\n  this.emit('item', name, level, args);\n};\n\nTransform.prototype.end = function() {\n  this.emit('end');\n  this.removeAllListeners();\n};\n\nTransform.prototype.pipe = function(dest) {\n  var s = this;\n  // prevent double piping\n  s.emit('unpipe', dest);\n  // tell the dest that it's being piped to\n  dest.emit('pipe', s);\n\n  function onItem() {\n    dest.write.apply(dest, Array.prototype.slice.call(arguments));\n  }\n  function onEnd() { !dest._isStdio && dest.end(); }\n\n  s.on('item', onItem);\n  s.on('end', onEnd);\n\n  s.when('unpipe', function(from) {\n    var match = (from === dest) || typeof from == 'undefined';\n    if(match) {\n      s.removeListener('item', onItem);\n      s.removeListener('end', onEnd);\n      dest.emit('unpipe');\n    }\n    return match;\n  });\n\n  return dest;\n};\n\nTransform.prototype.unpipe = function(from) {\n  this.emit('unpipe', from);\n  return this;\n};\n\nTransform.prototype.format = function(dest) {\n  throw new Error([\n    'Warning: .format() is deprecated in Minilog v2! Use .pipe() instead. For example:',\n    'var Minilog = require(\\'minilog\\');',\n    'Minilog',\n    '  .pipe(Minilog.backends.console.formatClean)',\n    '  .pipe(Minilog.backends.console);'].join('\\n'));\n};\n\nTransform.mixin = function(dest) {\n  var o = Transform.prototype, k;\n  for (k in o) {\n    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);\n  }\n};\n\nmodule.exports = Transform;\n","var Transform = require('../common/transform.js'),\n    cache = [ ];\n\nvar logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  cache.push([ name, level, args ]);\n};\n\n// utility functions\nlogger.get = function() { return cache; };\nlogger.empty = function() { cache = []; };\n\nmodule.exports = logger;\n","var Transform = require('../common/transform.js');\n\nvar newlines = /\\n+$/,\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var i = args.length-1;\n  if (typeof console === 'undefined' || !console.log) {\n    return;\n  }\n  if(console.log.apply) {\n    return console.log.apply(console, [name, level].concat(args));\n  } else if(JSON && JSON.stringify) {\n    // console.log.apply is undefined in IE8 and IE9\n    // for IE8/9: make console.log at least a bit less awful\n    if(args[i] && typeof args[i] == 'string') {\n      args[i] = args[i].replace(newlines, '');\n    }\n    try {\n      for(i = 0; i < args.length; i++) {\n        args[i] = JSON.stringify(args[i]);\n      }\n    } catch(e) {}\n    console.log(args.join(' '));\n  }\n};\n\nlogger.formatters = ['color', 'minilog'];\nlogger.color = require('./formatters/color.js');\nlogger.minilog = require('./formatters/minilog.js');\n\nmodule.exports = logger;\n","var Transform = require('../../common/transform.js'),\n    color = require('./util.js');\n\nvar colors = { debug: ['cyan'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var fn = console.log;\n  if(console[level] && console[level].apply) {\n    fn = console[level];\n    fn.apply(console, [ '%c'+name+' %c'+level, color('gray'), color.apply(color, colors[level])].concat(args));\n  }\n};\n\n// NOP, because piping the formatted logs can only cause trouble.\nlogger.pipe = function() { };\n\nmodule.exports = logger;\n","var Transform = require('../../common/transform.js'),\n    color = require('./util.js'),\n    colors = { debug: ['gray'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var fn = console.log;\n  if(level != 'debug' && console[level]) {\n    fn = console[level];\n  }\n\n  var subset = [], i = 0;\n  if(level != 'info') {\n    for(; i < args.length; i++) {\n      if(typeof args[i] != 'string') break;\n    }\n    fn.apply(console, [ '%c'+name +' '+ args.slice(0, i).join(' '), color.apply(color, colors[level]) ].concat(args.slice(i)));\n  } else {\n    fn.apply(console, [ '%c'+name, color.apply(color, colors[level]) ].concat(args));\n  }\n};\n\n// NOP, because piping the formatted logs can only cause trouble.\nlogger.pipe = function() { };\n\nmodule.exports = logger;\n","var hex = {\n  black: '#000',\n  red: '#c23621',\n  green: '#25bc26',\n  yellow: '#bbbb00',\n  blue:  '#492ee1',\n  magenta: '#d338d3',\n  cyan: '#33bbc8',\n  gray: '#808080',\n  purple: '#708'\n};\nfunction color(fg, isInverse) {\n  if(isInverse) {\n    return 'color: #fff; background: '+hex[fg]+';';\n  } else {\n    return 'color: '+hex[fg]+';';\n  }\n}\n\nmodule.exports = color;\n","var Minilog = require('../common/minilog.js');\n\nvar oldEnable = Minilog.enable,\n    oldDisable = Minilog.disable,\n    isChrome = (typeof navigator != 'undefined' && /chrome/i.test(navigator.userAgent)),\n    console = require('./console.js');\n\n// Use a more capable logging backend if on Chrome\nMinilog.defaultBackend = (isChrome ? console.minilog : console);\n\n// apply enable inputs from localStorage and from the URL\nif(typeof window != 'undefined') {\n  try {\n    Minilog.enable(JSON.parse(window.localStorage['minilogSettings']));\n  } catch(e) {}\n  if(window.location && window.location.search) {\n    var match = RegExp('[?&]minilog=([^&]*)').exec(window.location.search);\n    match && Minilog.enable(decodeURIComponent(match[1]));\n  }\n}\n\n// Make enable also add to localStorage\nMinilog.enable = function() {\n  oldEnable.call(Minilog, true);\n  try { window.localStorage['minilogSettings'] = JSON.stringify(true); } catch(e) {}\n  return this;\n};\n\nMinilog.disable = function() {\n  oldDisable.call(Minilog);\n  try { delete window.localStorage.minilogSettings; } catch(e) {}\n  return this;\n};\n\nexports = module.exports = Minilog;\n\nexports.backends = {\n  array: require('./array.js'),\n  browser: Minilog.defaultBackend,\n  localStorage: require('./localstorage.js'),\n  jQuery: require('./jquery_simple.js')\n};\n","var Transform = require('../common/transform.js');\n\nvar cid = new Date().valueOf().toString(36);\n\nfunction AjaxLogger(options) {\n  this.url = options.url || '';\n  this.cache = [];\n  this.timer = null;\n  this.interval = options.interval || 30*1000;\n  this.enabled = true;\n  this.jQuery = window.jQuery;\n  this.extras = {};\n}\n\nTransform.mixin(AjaxLogger);\n\nAjaxLogger.prototype.write = function(name, level, args) {\n  if(!this.timer) { this.init(); }\n  this.cache.push([name, level].concat(args));\n};\n\nAjaxLogger.prototype.init = function() {\n  if(!this.enabled || !this.jQuery) return;\n  var self = this;\n  this.timer = setTimeout(function() {\n    var i, logs = [], ajaxData, url = self.url;\n    if(self.cache.length == 0) return self.init();\n    // Test each log line and only log the ones that are valid (e.g. don't have circular references).\n    // Slight performance hit but benefit is we log all valid lines.\n    for(i = 0; i < self.cache.length; i++) {\n      try {\n        JSON.stringify(self.cache[i]);\n        logs.push(self.cache[i]);\n      } catch(e) { }\n    }\n    if(self.jQuery.isEmptyObject(self.extras)) {\n        ajaxData = JSON.stringify({ logs: logs });\n        url = self.url + '?client_id=' + cid;\n    } else {\n        ajaxData = JSON.stringify(self.jQuery.extend({logs: logs}, self.extras));\n    }\n\n    self.jQuery.ajax(url, {\n      type: 'POST',\n      cache: false,\n      processData: false,\n      data: ajaxData,\n      contentType: 'application/json',\n      timeout: 10000\n    }).success(function(data, status, jqxhr) {\n      if(data.interval) {\n        self.interval = Math.max(1000, data.interval);\n      }\n    }).error(function() {\n      self.interval = 30000;\n    }).always(function() {\n      self.init();\n    });\n    self.cache = [];\n  }, this.interval);\n};\n\nAjaxLogger.prototype.end = function() {};\n\n// wait until jQuery is defined. Useful if you don't control the load order.\nAjaxLogger.jQueryWait = function(onDone) {\n  if(typeof window !== 'undefined' && (window.jQuery || window.$)) {\n    return onDone(window.jQuery || window.$);\n  } else if (typeof window !== 'undefined') {\n    setTimeout(function() { AjaxLogger.jQueryWait(onDone); }, 200);\n  }\n};\n\nmodule.exports = AjaxLogger;\n","var Transform = require('../common/transform.js'),\n    cache = false;\n\nvar logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  if(typeof window == 'undefined' || typeof JSON == 'undefined' || !JSON.stringify || !JSON.parse) return;\n  try {\n    if(!cache) { cache = (window.localStorage.minilog ? JSON.parse(window.localStorage.minilog) : []); }\n    cache.push([ new Date().toString(), name, level, args ]);\n    window.localStorage.minilog = JSON.stringify(cache);\n  } catch(e) {}\n};\n\nmodule.exports = logger;","const log = require('../util/log');\nconst mlforkidsSound = require('../mlforkids-components/sound');\nconst mlforkidsImages = require('../mlforkids-components/images');\nconst mlforkidsRegression = require('../mlforkids-components/regression');\nconst mlforkidsTensorFlow = require('../mlforkids-components/tensorflow');\nconst mlforkidsStorage = require('../mlforkids-components/storage');\n\n\n/**\n * @typedef {object} DispatchCallMessage - a message to the dispatch system representing a service method call\n * @property {*} responseId - send a response message with this response ID. See {@link DispatchResponseMessage}\n * @property {string} service - the name of the service to be called\n * @property {string} method - the name of the method to be called\n * @property {Array|undefined} args - the arguments to be passed to the method\n */\n\n/**\n * @typedef {object} DispatchResponseMessage - a message to the dispatch system representing the results of a call\n * @property {*} responseId - a copy of the response ID from the call which generated this response\n * @property {*|undefined} error - if this is truthy, then it contains results from a failed call (such as an exception)\n * @property {*|undefined} result - if error is not truthy, then this contains the return value of the call (if any)\n */\n\n/**\n * @typedef {DispatchCallMessage|DispatchResponseMessage} DispatchMessage\n * Any message to the dispatch system.\n */\n\n/**\n * The SharedDispatch class is responsible for dispatch features shared by\n * {@link CentralDispatch} and {@link WorkerDispatch}.\n */\nclass SharedDispatch {\n    constructor () {\n        /**\n         * List of callback registrations for promises waiting for a response from a call to a service on another\n         * worker. A callback registration is an array of [resolve,reject] Promise functions.\n         * Calls to local services don't enter this list.\n         * @type {Array.<Function[]>}\n         */\n        this.callbacks = [];\n\n        /**\n         * The next response ID to be used.\n         * @type {int}\n         */\n        this.nextResponseId = 0;\n    }\n\n    /**\n     * Call a particular method on a particular service, regardless of whether that service is provided locally or on\n     * a worker. If the service is provided by a worker, the `args` will be copied using the Structured Clone\n     * algorithm, except for any items which are also in the `transfer` list. Ownership of those items will be\n     * transferred to the worker, and they should not be used after this call.\n     * @example\n     *      dispatcher.call('vm', 'setData', 'cat', 42);\n     *      // this finds the worker for the 'vm' service, then on that worker calls:\n     *      vm.setData('cat', 42);\n     * @param {string} service - the name of the service.\n     * @param {string} method - the name of the method.\n     * @param {*} [args] - the arguments to be copied to the method, if any.\n     * @returns {Promise} - a promise for the return value of the service method.\n     */\n    call (service, method, ...args) {\n        return this.transferCall(service, method, null, ...args);\n    }\n\n    /**\n     * Call a particular method on a particular service, regardless of whether that service is provided locally or on\n     * a worker. If the service is provided by a worker, the `args` will be copied using the Structured Clone\n     * algorithm, except for any items which are also in the `transfer` list. Ownership of those items will be\n     * transferred to the worker, and they should not be used after this call.\n     * @example\n     *      dispatcher.transferCall('vm', 'setData', [myArrayBuffer], 'cat', myArrayBuffer);\n     *      // this finds the worker for the 'vm' service, transfers `myArrayBuffer` to it, then on that worker calls:\n     *      vm.setData('cat', myArrayBuffer);\n     * @param {string} service - the name of the service.\n     * @param {string} method - the name of the method.\n     * @param {Array} [transfer] - objects to be transferred instead of copied. Must be present in `args` to be useful.\n     * @param {*} [args] - the arguments to be copied to the method, if any.\n     * @returns {Promise} - a promise for the return value of the service method.\n     */\n    transferCall (service, method, transfer, ...args) {\n        try {\n            const {provider, isRemote} = this._getServiceProvider(service);\n            if (provider) {\n                if (isRemote) {\n                    return this._remoteTransferCall(provider, service, method, transfer, ...args);\n                }\n\n                // TODO: verify correct `this` after switching from apply to spread\n                // eslint-disable-next-line prefer-spread\n                const result = provider[method].apply(provider, args);\n                return Promise.resolve(result);\n            }\n            return Promise.reject(new Error(`Service not found: ${service}`));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Check if a particular service lives on another worker.\n     * @param {string} service - the service to check.\n     * @returns {boolean} - true if the service is remote (calls must cross a Worker boundary), false otherwise.\n     * @private\n     */\n    _isRemoteService (service) {\n        return this._getServiceProvider(service).isRemote;\n    }\n\n    /**\n     * Like {@link call}, but force the call to be posted through a particular communication channel.\n     * @param {object} provider - send the call through this object's `postMessage` function.\n     * @param {string} service - the name of the service.\n     * @param {string} method - the name of the method.\n     * @param {*} [args] - the arguments to be copied to the method, if any.\n     * @returns {Promise} - a promise for the return value of the service method.\n     */\n    _remoteCall (provider, service, method, ...args) {\n        return this._remoteTransferCall(provider, service, method, null, ...args);\n    }\n\n    /**\n     * Like {@link transferCall}, but force the call to be posted through a particular communication channel.\n     * @param {object} provider - send the call through this object's `postMessage` function.\n     * @param {string} service - the name of the service.\n     * @param {string} method - the name of the method.\n     * @param {Array} [transfer] - objects to be transferred instead of copied. Must be present in `args` to be useful.\n     * @param {*} [args] - the arguments to be copied to the method, if any.\n     * @returns {Promise} - a promise for the return value of the service method.\n     */\n    _remoteTransferCall (provider, service, method, transfer, ...args) {\n        return new Promise((resolve, reject) => {\n            const responseId = this._storeCallbacks(resolve, reject);\n\n            /** @TODO: remove this hack! this is just here so we don't try to send `util` to a worker */\n            if ((args.length > 0) && (typeof args[args.length - 1].yield === 'function')) {\n                args.pop();\n            }\n\n            if (transfer) {\n                provider.postMessage({service, method, responseId, args}, transfer);\n            } else {\n                provider.postMessage({service, method, responseId, args});\n            }\n        });\n    }\n\n    /**\n     * Store callback functions pending a response message.\n     * @param {Function} resolve - function to call if the service method returns.\n     * @param {Function} reject - function to call if the service method throws.\n     * @returns {*} - a unique response ID for this set of callbacks. See {@link _deliverResponse}.\n     * @protected\n     */\n    _storeCallbacks (resolve, reject) {\n        const responseId = this.nextResponseId++;\n        this.callbacks[responseId] = [resolve, reject];\n        return responseId;\n    }\n\n    /**\n     * Deliver call response from a worker. This should only be called as the result of a message from a worker.\n     * @param {int} responseId - the response ID of the callback set to call.\n     * @param {DispatchResponseMessage} message - the message containing the response value(s).\n     * @protected\n     */\n    _deliverResponse (responseId, message) {\n        try {\n            const [resolve, reject] = this.callbacks[responseId];\n            delete this.callbacks[responseId];\n            if (message.error) {\n                reject(message.error);\n            } else {\n                resolve(message.result);\n            }\n        } catch (e) {\n            log.error(`Dispatch callback failed: ${JSON.stringify(e)}`);\n        }\n    }\n\n    /**\n     * Handle a message event received from a connected worker.\n     * @param {Worker} worker - the worker which sent the message, or the global object if running in a worker.\n     * @param {MessageEvent} event - the message event to be handled.\n     * @protected\n     */\n    _onMessage (worker, event) {\n        /** @type {DispatchMessage} */\n        const message = event.data;\n        message.args = message.args || [];\n        let promise;\n        if (message.service) {\n            if (message.service === 'dispatch') {\n                promise = this._onDispatchMessage(worker, message);\n            } else {\n                promise = this.call(message.service, message.method, ...message.args);\n            }\n        } else if (message.mlforkids) {\n            console.log('[mlforkids] Handling message from ML for Kids extension running in a web worker', message);\n            window.dispatchEvent(new Event(message.mlforkids));\n        } else if (message.mlforkidssound) {\n            if (message.mlforkidssound.command === 'init') {\n                if (!this.mlforkidsSoundSupport) {\n                    this.mlforkidsSoundSupport = new mlforkidsSound(this.mlforkidsStorageSupport);\n                }\n                this.mlforkidsSoundSupport.init(message.mlforkidssound.data, worker);\n            }\n            else if (message.mlforkidssound.command === 'initlocal') {\n                if (!this.mlforkidsSoundSupport) {\n                    this.mlforkidsSoundSupport = new mlforkidsSound(this.mlforkidsStorageSupport);\n                }\n                return this.mlforkidsStorageSupport.getProject(message.mlforkidssound.data)\n                    .then((projectinfo) => {\n                        projectinfo.projectid = message.mlforkidssound.data;\n                        this.mlforkidsSoundSupport.init(projectinfo, worker);\n                    })\n                    .catch((err) => {\n                        console.log('[mlforkids] failed to load project', err);\n                        worker.postMessage({\n                            mlforkidssound: 'modelfailed'\n                        });\n                    });\n            }\n            else if (message.mlforkidssound.command === 'train') {\n                this.mlforkidsSoundSupport.trainNewModel(message.mlforkidssound.data, worker);\n            }\n            else if (message.mlforkidssound.command === 'trainlocal') {\n                this.mlforkidsSoundSupport.trainNewModelLocal(message.mlforkidssound.data, worker);\n            }\n            else if (message.mlforkidssound.command === 'listen') {\n                this.mlforkidsSoundSupport.startListening(worker);\n            }\n            else if (message.mlforkidssound.command === 'stoplisten') {\n                this.mlforkidsSoundSupport.stopListening();\n            }\n        } else if (message.mlforkidsimage) {\n            if (message.mlforkidsimage.command === 'init'){\n                if (!this.mlforkidsImageSupport) {\n                    this.mlforkidsImageSupport = new mlforkidsImages(this.mlforkidsStorageSupport);\n                }\n                this.mlforkidsImageSupport.init()\n                    .then(() => {\n                        this.mlforkidsImageSupport.initProject(message.mlforkidsimage.data, worker);\n                    });\n            }\n            else if (message.mlforkidsimage.command === 'initlocal'){\n                if (!this.mlforkidsImageSupport) {\n                    this.mlforkidsImageSupport = new mlforkidsImages(this.mlforkidsStorageSupport);\n                }\n                this.mlforkidsImageSupport.init()\n                    .then(() => {\n                        return this.mlforkidsStorageSupport.getProject(message.mlforkidsimage.data);\n                    })\n                    .then((projectinfo) => {\n                        projectinfo.projectid = message.mlforkidsimage.data;\n                        this.mlforkidsImageSupport.initProject(projectinfo, worker);\n                    })\n                    .catch((err) => {\n                        console.log('[mlforkids] failed to load project', err);\n                        worker.postMessage({\n                            mlforkidsimage: 'modelfailed',\n                            data: { projectid : message.mlforkidsimage.data }\n                        });\n                    });\n            }\n            else if (message.mlforkidsimage.command === 'classify'){\n                this.mlforkidsImageSupport.classifyImageData(message.mlforkidsimage.data, worker);\n            }\n            else if (message.mlforkidsimage.command === 'train') {\n                this.mlforkidsImageSupport.trainNewModel(message.mlforkidsimage.data, worker);\n            }\n            else if (message.mlforkidsimage.command === 'trainlocal') {\n                this.mlforkidsImageSupport.trainNewModelLocal(message.mlforkidsimage.data, worker);\n            }\n        } else if (message.mlforkidsregression) {\n            if (message.mlforkidsregression.command === 'init'){\n                if (!this.mlforkidsRegressionSupport) {\n                    this.mlforkidsRegressionSupport = new mlforkidsRegression(this.mlforkidsStorageSupport);\n                }\n                this.mlforkidsRegressionSupport.init()\n                    .then(() => {\n                        return this.mlforkidsStorageSupport.getProject(message.mlforkidsregression.data);\n                    })\n                    .then((projectinfo) => {\n                        projectinfo.projectid = message.mlforkidsregression.data;\n                        this.mlforkidsRegressionSupport.initProject(projectinfo, worker);\n                    })\n                    .catch((err) => {\n                        console.log('[mlforkids] failed to load project', err);\n                        worker.postMessage({\n                            mlforkidsimage: 'modelfailed',\n                            data: { projectid : message.mlforkidsregression.data }\n                        });\n                    });\n            }\n            else if (message.mlforkidsregression.command === 'train'){\n                this.mlforkidsRegressionSupport.trainNewModel(message.mlforkidsregression.data, worker);\n            }\n            else if (message.mlforkidsregression.command === 'predict'){\n                this.mlforkidsRegressionSupport.predict(message.mlforkidsregression.data, worker);\n            }\n        } else if (message.mlforkidsstorage) {\n            if (message.mlforkidsstorage.command === 'init'){\n                if (!this.mlforkidsStorageSupport) {\n                    this.mlforkidsStorageSupport = new mlforkidsStorage();\n                }\n            }\n            else if (message.mlforkidsstorage.command === 'storeimage') {\n                this.mlforkidsStorageSupport.storeBase64EncodedImage(\n                    message.mlforkidsstorage.data.projectid,\n                    message.mlforkidsstorage.data.label,\n                    message.mlforkidsstorage.data.image\n                );\n            }\n            else if (message.mlforkidsstorage.command === 'storetext') {\n                this.mlforkidsStorageSupport.addTrainingData(message.mlforkidsstorage.data.projectid, {\n                    textdata : message.mlforkidsstorage.data.textdata,\n                    label : message.mlforkidsstorage.data.label\n                });\n            }\n            else if (message.mlforkidsstorage.command === 'storeregression') {\n                this.mlforkidsStorageSupport.addTrainingData(message.mlforkidsstorage.data.projectid,\n                                                             message.mlforkidsstorage.data.values);\n            }\n            else if (message.mlforkidsstorage.command === 'textwatson') {\n                this.mlforkidsStorageSupport.getProject(message.mlforkidsstorage.data.projectid)\n                    .then((projectinfo) => {\n                        return this.mlforkidsStorageSupport.getTrainingForWatsonAssistant(projectinfo);\n                    })\n                    .then((training) => {\n                        worker.postMessage({\n                            mlforkidsstorage : 'textwatson',\n                            projectid : message.mlforkidsstorage.data.projectid,\n                            data : training\n                        });\n                    });\n            }\n            else if (message.mlforkidsstorage.command === 'trainingdata') {\n                this.mlforkidsStorageSupport.getTrainingData(message.mlforkidsstorage.data.projectid)\n                    .then((training) => {\n                        worker.postMessage({\n                            mlforkidsstorage : 'trainingdata',\n                            projectid : message.mlforkidsstorage.data.projectid,\n                            data : training\n                        });\n                    });\n            }\n        } else if (message.mlforkidstensorflow) {\n            if (message.mlforkidstensorflow.command === 'init'){\n                if (!this.mlforkidsTensorFlowSupport) {\n                    this.mlforkidsTensorFlowSupport = new mlforkidsTensorFlow();\n                }\n                this.mlforkidsTensorFlowSupport.initProject(message.mlforkidstensorflow.data, worker);\n            }\n            else if (message.mlforkidstensorflow.command === 'classify'){\n                this.mlforkidsTensorFlowSupport.classifyData(message.mlforkidstensorflow.data, worker);\n            }\n        } else if (typeof message.responseId === 'undefined') {\n            log.error(`Dispatch caught malformed message from a worker: ${JSON.stringify(event)}`);\n        } else {\n            this._deliverResponse(message.responseId, message);\n        }\n        if (promise) {\n            if (typeof message.responseId === 'undefined') {\n                log.error(`Dispatch message missing required response ID: ${JSON.stringify(event)}`);\n            } else {\n                promise.then(\n                    result => worker.postMessage({responseId: message.responseId, result}),\n                    error => worker.postMessage({responseId: message.responseId, error})\n                );\n            }\n        }\n    }\n\n    /**\n     * Fetch the service provider object for a particular service name.\n     * @abstract\n     * @param {string} service - the name of the service to look up\n     * @returns {{provider:(object|Worker), isRemote:boolean}} - the means to contact the service, if found\n     * @protected\n     */\n    _getServiceProvider (service) {\n        throw new Error(`Could not get provider for ${service}: _getServiceProvider not implemented`);\n    }\n\n    /**\n     * Handle a call message sent to the dispatch service itself\n     * @abstract\n     * @param {Worker} worker - the worker which sent the message.\n     * @param {DispatchCallMessage} message - the message to be handled.\n     * @returns {Promise|undefined} - a promise for the results of this operation, if appropriate\n     * @private\n     */\n    _onDispatchMessage (worker, message) {\n        throw new Error(`Unimplemented dispatch message handler cannot handle ${message.method} method`);\n    }\n}\n\nmodule.exports = SharedDispatch;\n","const SharedDispatch = require('./shared-dispatch');\n\nconst log = require('../util/log');\n\n/**\n * This class provides a Worker with the means to participate in the message dispatch system managed by CentralDispatch.\n * From any context in the messaging system, the dispatcher's \"call\" method can call any method on any \"service\"\n * provided in any participating context. The dispatch system will forward function arguments and return values across\n * worker boundaries as needed.\n * @see {CentralDispatch}\n */\nclass WorkerDispatch extends SharedDispatch {\n    constructor () {\n        super();\n\n        /**\n         * This promise will be resolved when we have successfully connected to central dispatch.\n         * @type {Promise}\n         * @see {waitForConnection}\n         * @private\n         */\n        this._connectionPromise = new Promise(resolve => {\n            this._onConnect = resolve;\n        });\n\n        /**\n         * Map of service name to local service provider.\n         * If a service is not listed here, it is assumed to be provided by another context (another Worker or the main\n         * thread).\n         * @see {setService}\n         * @type {object}\n         */\n        this.services = {};\n\n        this._onMessage = this._onMessage.bind(this, self);\n        if (typeof self !== 'undefined') {\n            self.onmessage = this._onMessage;\n        }\n    }\n\n    /**\n     * @returns {Promise} a promise which will resolve upon connection to central dispatch. If you need to make a call\n     * immediately on \"startup\" you can attach a 'then' to this promise.\n     * @example\n     *      dispatch.waitForConnection.then(() => {\n     *          dispatch.call('myService', 'hello');\n     *      })\n     */\n    get waitForConnection () {\n        return this._connectionPromise;\n    }\n\n    /**\n     * Set a local object as the global provider of the specified service.\n     * WARNING: Any method on the provider can be called from any worker within the dispatch system.\n     * @param {string} service - a globally unique string identifying this service. Examples: 'vm', 'gui', 'extension9'.\n     * @param {object} provider - a local object which provides this service.\n     * @returns {Promise} - a promise which will resolve once the service is registered.\n     */\n    setService (service, provider) {\n        if (Object.prototype.hasOwnProperty.call(this.services, service)) {\n            log.warn(`Worker dispatch replacing existing service provider for ${service}`);\n        }\n        this.services[service] = provider;\n        return this.waitForConnection.then(() => this._remoteCall(self, 'dispatch', 'setService', service));\n    }\n\n    /**\n     * Fetch the service provider object for a particular service name.\n     * @override\n     * @param {string} service - the name of the service to look up\n     * @returns {{provider:(object|Worker), isRemote:boolean}} - the means to contact the service, if found\n     * @protected\n     */\n    _getServiceProvider (service) {\n        // if we don't have a local service by this name, contact central dispatch by calling `postMessage` on self\n        const provider = this.services[service];\n        return {\n            provider: provider || self,\n            isRemote: !provider\n        };\n    }\n\n    /**\n     * Handle a call message sent to the dispatch service itself\n     * @override\n     * @param {Worker} worker - the worker which sent the message.\n     * @param {DispatchCallMessage} message - the message to be handled.\n     * @returns {Promise|undefined} - a promise for the results of this operation, if appropriate\n     * @protected\n     */\n    _onDispatchMessage (worker, message) {\n        let promise;\n        switch (message.method) {\n        case 'handshake':\n            promise = this._onConnect();\n            break;\n        case 'terminate':\n            // Don't close until next tick, after sending confirmation back\n            setTimeout(() => self.close(), 0);\n            promise = Promise.resolve();\n            break;\n        default:\n            log.error(`Worker dispatch received message for unknown method: ${message.method}`);\n        }\n        return promise;\n    }\n}\n\nmodule.exports = new WorkerDispatch();\n","/**\n * Block argument types\n * @enum {string}\n */\nconst ArgumentType = {\n    /**\n     * Numeric value with angle picker\n     */\n    ANGLE: 'angle',\n\n    /**\n     * Boolean value with hexagonal placeholder\n     */\n    BOOLEAN: 'Boolean',\n\n    /**\n     * Numeric value with color picker\n     */\n    COLOR: 'color',\n\n    /**\n     * Numeric value with text field\n     */\n    NUMBER: 'number',\n\n    /**\n     * String value with text field\n     */\n    STRING: 'string',\n\n    /**\n     * String value with matrix field\n     */\n    MATRIX: 'matrix',\n\n    /**\n     * MIDI note number with note picker (piano) field\n     */\n    NOTE: 'note',\n\n    /**\n     * Inline image on block (as part of the label)\n     */\n    IMAGE: 'image'\n};\n\nmodule.exports = ArgumentType;\n","/**\n * Types of block\n * @enum {string}\n */\nconst BlockType = {\n    /**\n     * Boolean reporter with hexagonal shape\n     */\n    BOOLEAN: 'Boolean',\n\n    /**\n     * A button (not an actual block) for some special action, like making a variable\n     */\n    BUTTON: 'button',\n\n    /**\n     * Command block\n     */\n    COMMAND: 'command',\n\n    /**\n     * Specialized command block which may or may not run a child branch\n     * The thread continues with the next block whether or not a child branch ran.\n     */\n    CONDITIONAL: 'conditional',\n\n    /**\n     * Specialized hat block with no implementation function\n     * This stack only runs if the corresponding event is emitted by other code.\n     */\n    EVENT: 'event',\n\n    /**\n     * Hat block which conditionally starts a block stack\n     */\n    HAT: 'hat',\n\n    /**\n     * Specialized command block which may or may not run a child branch\n     * If a child branch runs, the thread evaluates the loop block again.\n     */\n    LOOP: 'loop',\n\n    /**\n     * General reporter with numeric or string value\n     */\n    REPORTER: 'reporter'\n};\n\nmodule.exports = BlockType;\n","/**\n * Default types of Target supported by the VM\n * @enum {string}\n */\nconst TargetType = {\n    /**\n     * Rendered target which can move, change costumes, etc.\n     */\n    SPRITE: 'sprite',\n\n    /**\n     * Rendered target which cannot move but can change backdrops\n     */\n    STAGE: 'stage'\n};\n\nmodule.exports = TargetType;\n","class ML4KidsImageTraining {\n\n    // This component needs to support multiple instances of the image\n    //  extension being used at once, so all state and models are\n    //  indexed by project id\n    // The base model can be shared across all projects\n\n    // state = <INIT/READY/ERROR>\n    // baseModel = <model>\n    // PROJECTS[projectid].modelClasses = <label1/label2/label3/...>\n    // PROJECTS[projectid].modelNumClasses = <number of modelClasses>\n    // PROJECTS[projectid].state = INIT/READY/TRAINING/TRAINED/ERROR\n    // PROJECTS[projectid].transferModel = <model>\n    // PROJECTS[projectid].usingRestoredModel = true/false\n\n    // states:\n    //   INIT - not ready yet\n    //   READY - ready for training\n    //   TRAINING - training in progress\n    //   TRAINED - ML model ready for use\n    //   ERROR - something went wrong\n\n\n    constructor (storageSupport) {\n        this.PROJECTS = {};\n        this.state = 'INIT';\n\n        this._storageSupport = storageSupport;\n    }\n\n\n    // safe to call this multiple times, including calling it before the first call has completed\n    init () {\n        if (!this.initPromise) {\n            this.initPromise = new Promise((resolve, reject) => {\n                tf.enableProdMode();\n\n                // const BASE_MODEL = 'https://storage.googleapis.com' +\n                //                     '/tfjs-models/tfjs' +\n                //                     '/mobilenet_v1_0.25_224' +\n                //                     '/model.json';\n                const BASE_MODEL = 'https://machinelearningforkids.co.uk/static/bower_components/tensorflow-models/image-recognition-scratch/model.json';\n                tf.loadLayersModel(BASE_MODEL)\n                    .then((pretrainedModel) => {\n                        const activationLayer = pretrainedModel.getLayer('conv_pw_13_relu');\n                        this.baseModel = tf.model({\n                            inputs : pretrainedModel.inputs,\n                            outputs: activationLayer.output\n                        });\n\n                        this.state = 'READY';\n\n                        resolve();\n                    })\n                    .catch((err) => {\n                        this.state = 'ERROR';\n                        console.log('[mlforkids] Failed to initialise images component', err);\n\n                        reject(err);\n                    });\n            });\n        }\n        return this.initPromise;\n    }\n\n    // encprojectdata\n    // JSON.stringify-ed version of\n    //   { labels : [ labelA, labelB, labelC ], projectid : projectId }\n    initProject (encprojectdata, worker) {\n        console.log('[mlforkids] ML4KidsImageTraining init');\n\n        const projectData = typeof encprojectdata === 'string' ? JSON.parse(encprojectdata) : encprojectdata;\n        const projectid = projectData.projectid;\n\n        this.PROJECTS[projectid] = {};\n        this.PROJECTS[projectid].state = 'INIT';\n        this.PROJECTS[projectid].modelClasses = projectData.labels;\n        this.PROJECTS[projectid].modelNumClasses = projectData.labels.length;\n        this.PROJECTS[projectid].usingRestoredModel = false;\n\n        return this._loadModel(projectid)\n            .then((model) => {\n                if (model) {\n                    this.PROJECTS[projectid].transferModel = model;\n                    this.PROJECTS[projectid].state = 'TRAINED';\n                    this.PROJECTS[projectid].usingRestoredModel = true;\n\n                    worker.postMessage({\n                        mlforkidsimage: 'modelready',\n                        data: { projectid : projectid }\n                    });\n                }\n                else {\n                    this.PROJECTS[projectid].transferModel = this.prepareTransferLearningModel(projectData.labels.length);\n                    this.PROJECTS[projectid].state = 'READY';\n\n                    worker.postMessage({\n                        mlforkidsimage: 'modelinit',\n                        data: { projectid : projectid }\n                    });\n                }\n\n                this._watchForNewModels(projectid, worker);\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsImageTraining failed init', err);\n                this.PROJECTS[projectid].state = 'ERROR';\n\n                worker.postMessage({\n                    mlforkidsimage: 'modelfailed',\n                    data: { projectid : projectid }\n                });\n            });\n    }\n\n    sortByConfidence (a, b) {\n        if (a.confidence < b.confidence) {\n            return 1;\n        }\n        else if (a.confidence > b.confidence) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    // encrequest\n    // JSON.stringify-ed version of\n    //   { projectid : projectId, requestid : requestId, imagedata: base64-enc-jpg }\n    classifyImageData (encrequest, worker) {\n        const requestData = JSON.parse(encrequest);\n        const projectid = requestData.projectid;\n        const requestid = requestData.requestid;\n\n        if (projectid in this.PROJECTS) {\n            if (this.PROJECTS[projectid].state !== 'TRAINED') {\n                console.log('[mlforkids] ML4KidsImageTraining received classify request before a model is ready');\n                return worker.postMessage({\n                    mlforkidsimage: 'classifyresponse',\n                    data: { projectid : projectid, requestid : requestid }\n                });\n            }\n\n            var imageElement = document.createElement('img');\n            imageElement.width = 224;\n            imageElement.height = 224;\n            imageElement.onerror = (err) => {\n                console.log('[mlforkids] failed to prepare image data for prediction', err);\n                return worker.postMessage({\n                    mlforkidsimage: 'classifyresponse',\n                    data: { projectid : projectid, requestid : requestid }\n                });\n            };\n            var that = this;\n            imageElement.onload = () => {\n                const imageDataTensor = tf.tidy(() => {\n                    return tf.browser.fromPixels(imageElement)\n                        .expandDims(0)\n                        .toFloat()\n                        .div(127)\n                        .sub(1);\n                });\n                const baseModelOutput = that.baseModel.predict(imageDataTensor);\n                const transferModelOutput = that.PROJECTS[projectid].transferModel.predict(baseModelOutput);\n                transferModelOutput.data().then((output) => {\n                    if (output.length !== that.PROJECTS[projectid].modelNumClasses) {\n                        console.log('[mlforkids] ML4KidsImageTraining received unexpected classify response', output);\n                        return worker.postMessage({\n                            mlforkidsimage: 'classifyresponse',\n                            data: { projectid : projectid, requestid : requestid }\n                        });\n                    }\n                    const matches = that.PROJECTS[projectid].modelClasses.map((label, idx) => {\n                        return {\n                            class_name : label,\n                            confidence : 100 * output[idx]\n                        };\n                    }).sort(that.sortByConfidence);\n                    return worker.postMessage({\n                        mlforkidsimage: 'classifyresponse',\n                        data: { projectid : projectid, requestid : requestid, matches : matches }\n                    });\n                });\n            };\n\n            imageElement.src = 'data:image/jpeg;base64,' + requestData.imagedata;\n        }\n        else {\n            console.log('[mlforkids] ML4KidsImageTraining received request for unknown project');\n            return worker.postMessage({\n                mlforkidsimage: 'classifyresponse',\n                data: { projectid : projectid, requestid : requestid }\n            });\n        }\n    }\n\n\n    prepareTransferLearningModel (numClasses) {\n        var model = tf.sequential({\n            layers : [\n                tf.layers.flatten({\n                    inputShape : this.baseModel.outputs[0].shape.slice(1)\n                }),\n                tf.layers.dense({\n                    units : 100,\n                    activation : 'relu',\n                    kernelInitializer : 'varianceScaling',\n                    useBias : true\n                }),\n                tf.layers.dense({\n                    units : numClasses,\n                    activation : 'softmax',\n                    kernelInitializer : 'varianceScaling',\n                    useBias : false\n                })\n            ]\n        });\n        model.compile({\n            optimizer : tf.train.adam(0.0001),\n            loss : 'categoricalCrossentropy'\n        });\n        return model;\n    }\n\n    _getModelDbLocation (projectid) {\n        return 'indexeddb://ml4k-models-images-' + projectid.toString().replaceAll('-', '');\n    }\n\n    _loadModel (projectid) {\n        console.log('[mlforkids] ML4KidsImageTraining loading model from browser storage');\n        const savelocation = this._getModelDbLocation(projectid);\n        return tf.loadLayersModel(savelocation)\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsImageTraining failed to load model from storage', err);\n                return;\n            });\n    }\n    _saveModel (projectid) {\n        console.log('[mlforkids] ML4KidsImageTraining saving model to browser storage');\n        const savelocation = this._getModelDbLocation(projectid);\n        return this.PROJECTS[projectid].transferModel.save(savelocation)\n            .then((results) => {\n                console.log('[mlforkids] ML4KidsImageTraining saved model', savelocation, results);\n                this._storeModelSavedDate(savelocation);\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsImageTraining failed to save model', err);\n            });\n    }\n\n    _storeModelSavedDate (modelid) {\n        try {\n            if (window.localStorage) {\n                window.localStorage.setItem(modelid, Date.now());\n            }\n        }\n        catch (err) {\n            console.log('[mlforkids] ML4KidsImageTraining unable to save model date');\n        }\n    }\n\n    _watchForNewModels (projectid, worker) {\n        if (!this.PROJECTS[projectid].modelWatcher) {\n            console.log('[mlforkids] ML4KidsImageTraining listening for model updates', projectid);\n            this.PROJECTS[projectid].modelWatcher = true;\n\n            const modellocation = this._getModelDbLocation(projectid);\n            this._storageSupport.registerForModelStorageUpdates(modellocation, () => {\n                console.log('[mlforkids] ML4KidsImageTraining new model was trained');\n\n                worker.postMessage({\n                    mlforkidsimage: 'modelretrain',\n                    data: { projectid : projectid }\n                });\n            });\n        }\n    }\n\n\n\n    _getLocalImageData (projectid, trainingdataid) {\n        let storedTrainingItem;\n        return this._storageSupport.getTrainingDataItem(projectid, trainingdataid)\n            .then((trainingitem) => {\n                storedTrainingItem = trainingitem;\n                if (!storedTrainingItem.imagedata) {\n                    const url = new URL('https://machinelearningforkids.co.uk/api/classes/' + tenant +\n                                        '/students/' + userid +\n                                        '/training/images');\n                    url.search = new URLSearchParams({\n                        imageurl : trainingitem.imageurl,\n                        label : trainingitem.label,\n                        option : 'prepare'\n                    });\n                    return fetch(url);\n                }\n            })\n            .then((resp) => {\n                if (storedTrainingItem.imagedata) {\n                    return storedTrainingItem.imagedata;\n                }\n                return resp.arrayBuffer();\n            })\n            .then((imgdata) => {\n                return { imgdata, metadata: storedTrainingItem };\n            });\n    }\n\n\n\n    trainNewModelLocal (projectinfo, worker) {\n        const projectid = projectinfo.projectid;\n\n        const that = this;\n        return this._storageSupport.getTrainingData(projectid)\n            .then((trainingitems) => {\n                const data = {\n                    projectid,\n                    trainingdata: trainingitems.map((trainingitem) => {\n                        return {\n                            metadata : trainingitem,\n                            imgdata : trainingitem.imagedata\n                        };\n                    })\n                };\n                that.trainNewModel(data, worker);\n            });\n    }\n\n\n\n    trainNewModel (data, worker) {\n        const projectid = data.projectid;\n\n        if (this.state !== 'READY') {\n            console.log('[mlforkids] ML4KidsImageTraining not ready to train a new ML model - state : ' + this.state);\n            return;\n        }\n        if (this.PROJECTS[projectid].state === 'TRAINING') {\n            console.log('[mlforkids] ML4KidsImageTraining training in progress for this model');\n            return;\n        }\n\n        console.log('[mlforkids] ML4KidsImageTraining training new model');\n\n        this.PROJECTS[projectid].state = 'TRAINING';\n\n        if (this.PROJECTS[projectid].usingRestoredModel) {\n            this.PROJECTS[projectid].transferModel = this.prepareTransferLearningModel(this.PROJECTS[projectid].modelNumClasses);\n        }\n\n        const that = this;\n        return Promise.all(data.trainingdata.map(this._getTensorForImageData))\n            .then((trainingdata) => {\n                let xs;\n                let ys;\n\n                for (let i = 0; i < trainingdata.length; i++) {\n                    const trainingdataitem = trainingdata[i];\n                    const labelIdx = that.PROJECTS[projectid].modelClasses.indexOf(trainingdataitem.metadata.label);\n\n                    const xval = that.baseModel.predict(trainingdataitem.data);\n                    const yval = tf.tidy(function () {\n                        return tf.oneHot(tf.tensor1d([ labelIdx ]).toInt(), that.PROJECTS[projectid].modelNumClasses);\n                    });\n\n                    if (i === 0) {\n                        xs = xval;\n                        ys = yval;\n                    }\n                    else {\n                        var oldxs = xs;\n                        var oldys = ys;\n                        xs = oldxs.concat(xval, 0);\n                        ys = oldys.concat(yval, 0);\n\n                        oldxs.dispose();\n                        oldys.dispose();\n                    }\n                }\n\n                let epochs = 10;\n                if (trainingdata.length > 55) {\n                    epochs = 15;\n                }\n\n                that.PROJECTS[projectid].transferModel.fit(xs, ys, {\n                    batchSize : 10,\n                    epochs : epochs,\n                    callbacks : {\n                        onEpochEnd : function (epoch, logs) {\n                            console.log('[mlforkids] ML4KidsImageTraining epoch ' + epoch + ' loss ' + logs.loss);\n                        },\n                        onTrainEnd : function () {\n                            console.log('[mlforkids] ML4KidsImageTraining training complete');\n                            that._saveModel(projectid);\n\n                            that.PROJECTS[projectid].state = 'TRAINED';\n                            that.PROJECTS[projectid].usingRestoredModel = false;\n\n                            worker.postMessage({\n                                mlforkidsimage: 'modelready',\n                                data: { projectid }\n                            });\n                        }\n                    }\n                });\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsImageTraining failed to train model', err);\n                this.PROJECTS[projectid].state = 'ERROR';\n                worker.postMessage({\n                    mlforkidsimage: 'modelfailed',\n                    data: { projectid }\n                });\n            });\n    }\n\n\n\n    _getTensorForImageData ({ imgdata, metadata }) {\n        return new Promise((resolve, reject) => {\n            var imgDataBlob = URL.createObjectURL(new Blob([imgdata]));\n\n            var hiddenImg = document.createElement('img');\n            hiddenImg.width = 224;\n            hiddenImg.height = 224;\n            hiddenImg.onerror = function (err) {\n                console.log('[mlforkids] ML4KidsImageTraining failed to load image', err);\n                return reject(err);\n            };\n            hiddenImg.onload = function () {\n                var imageData = tf.tidy(function () {\n                    return tf.browser.fromPixels(hiddenImg)\n                                .expandDims(0)\n                                .toFloat()\n                                .div(127)\n                                .sub(1);\n                });\n\n                resolve({ metadata, data : imageData });\n\n                URL.revokeObjectURL(imgDataBlob);\n            };\n\n            hiddenImg.src = imgDataBlob;\n        });\n    }\n}\n\nmodule.exports = ML4KidsImageTraining;\n","class ML4KidsRegressionTraining {\n\n    constructor (storageSupport) {\n        this.PROJECTS = {};\n        this.state = 'INIT';\n\n        this._storageSupport = storageSupport;\n    }\n\n\n    init () {\n        if (!this.initPromise) {\n            this.initPromise = new Promise((resolve) => {\n                tf.enableProdMode();\n                this.state = 'READY';\n                resolve();\n            });\n        }\n        return this.initPromise;\n    }\n\n\n    initProject (project, worker) {\n        this.PROJECTS[project.id] = {\n            state : 'INIT',\n            project : project\n        };\n\n        return this._loadModel(project.id)\n            .then((loaded) => {\n                if (loaded) {\n                    this.PROJECTS[project.id].state = 'TRAINED';\n                    worker.postMessage({\n                        mlforkidsregression: 'modelready',\n                        data: { projectid : project.id }\n                    });\n                }\n                else {\n                    this.PROJECTS[project.id].state = 'READY';\n                    worker.postMessage({\n                        mlforkidsregression: 'modelinit',\n                        data: { projectid : project.id }\n                    });\n                }\n\n                this._watchForNewModels(project.id, worker);\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsRegressionTraining failed init', err);\n                this.PROJECTS[projectid].state = 'ERROR';\n\n                worker.postMessage({\n                    mlforkidsregression: 'modelfailed',\n                    data: { projectid : project.id }\n                });\n            });\n    }\n\n\n    trainNewModel (projectid, worker) {\n        if (this.PROJECTS[projectid].state === 'TRAINING') {\n            console.log('[mlforkids] ML4KidsRegressionTraining training in progress for this model');\n            return;\n        }\n\n        console.log('[mlforkids] ML4KidsRegressionTraining training new model');\n\n        this.PROJECTS[projectid].state = 'TRAINING';\n\n        const that = this;\n        return this._storageSupport.getTrainingData(projectid)\n            .then((training) => {\n                const project = that.PROJECTS[projectid].project;\n\n                // separate out columns into input and output values\n                const inputColumns = project.columns\n                    .filter(function (col) { return col.output === false; })\n                    .map(function (col) { return col.label; });\n                const targetColumns = project.columns\n                    .filter(function (col) { return col.output === true; })\n                    .map(function (col) { return col.label; });\n\n                // turn array of JSON objects into array of raw numbers\n                const inputFeatures = [];\n                const targetFeatures = [];\n                for (let i = 0; i < training.length; i++) {\n                    const trainingitem = training[i];\n                    inputFeatures.push(inputColumns.map(function (col) { return trainingitem[col]; }));\n                    targetFeatures.push(targetColumns.map(function (col) { return trainingitem[col]; }));\n                }\n\n                // normalize the input\n                const inputFeaturesTensor = tf.tensor2d(inputFeatures);\n                const mean = inputFeaturesTensor.mean(0);\n                const standardDeviation = inputFeaturesTensor\n                    .sub(mean)\n                    .square()\n                    .mean(0)\n                    .sqrt();\n                that.PROJECTS[projectid].normalization = { mean, standardDeviation };\n                const normalisedInputFeatures = inputFeaturesTensor\n                    .sub(that.PROJECTS[projectid].normalization.mean)\n                    .div(that.PROJECTS[projectid].normalization.standardDeviation);\n\n                // TODO store the normalization?\n\n                // create the model\n                that.PROJECTS[projectid].model = that._defineModel(inputColumns.length, targetColumns.length);\n\n                // train the model\n                that.PROJECTS[projectid].model.fit(normalisedInputFeatures, tf.tensor2d(targetFeatures), {\n                    batchSize : 40,\n                    epochs : 200,\n                    validationSplit : 0.2,\n                    callbacks: {\n                        onEpochEnd : (epoch, logs) => {\n                            console.log('[mlforkids] ML4KidsRegressionTraining epoch ' + epoch + ' loss ' + logs.loss);\n                        },\n                        onTrainEnd : function () {\n                            console.log('[mlforkids] ML4KidsRegressionTraining training complete');\n                            that._saveModel(projectid);\n\n                            that.PROJECTS[projectid].state = 'TRAINED';\n                            worker.postMessage({\n                                mlforkidsregression: 'modelready',\n                                data: { projectid }\n                            });\n                        }\n                    }\n                });\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsRegressionTraining failed to train model', err);\n                this.PROJECTS[projectid].state = 'ERROR';\n                worker.postMessage({\n                    mlforkidsregression: 'modelfailed',\n                    data: { projectid }\n                });\n            });\n    }\n\n    predict (requestdata, worker) {\n        const requestid = requestdata.requestid;\n        const projectid = requestdata.projectid;\n        const project = this.PROJECTS[projectid].project;\n        const normalization = this.PROJECTS[projectid].normalization;\n        const testdata = requestdata.data;\n\n        var testTensor = tf.tidy(function () {\n            const inputValues = project.columns\n                .filter(function (col) { return col.output === false; })\n                .map(function (col) {\n                    return testdata[col.label];\n                });\n            const inputTensor = tf.tensor2d([ inputValues ]);\n            const normalisedInputValues = inputTensor\n                .sub(normalization.mean)\n                .div(normalization.standardDeviation);\n            return normalisedInputValues;\n        });\n        var modelOutput = this.PROJECTS[projectid].model.predict(testTensor);\n        modelOutput.data()\n            .then(function (output) {\n                const targetColumns = project.columns\n                    .filter(function (col) { return col.output === true; });\n\n                if (output.length !== targetColumns.length) {\n                    loggerService.error('[ml4kregress] unexpected output from model', output);\n                    throw new Error('Unexpected output from model');\n                }\n\n                var labelledOutput = {};\n                targetColumns.forEach(function (col, idx) {\n                    labelledOutput[col.label] = output[idx];\n                });\n\n                worker.postMessage({\n                    mlforkidsregression: 'classifyresponse',\n                    data: { projectid : projectid, requestid : requestid, prediction : labelledOutput }\n                });\n            })\n            .catch(function (err) {\n                console.log('[mlforkids] ML4KidsRegressionTraining failed to run test', err);\n                // TODO\n            });\n    }\n\n\n    _defineModel (numInputFeatures, numOutputLabels) {\n        const regressionModel = tf.sequential();\n        regressionModel.add(\n            tf.layers.dense({\n                inputShape : [ numInputFeatures ],\n                units : 50,\n                activation : 'sigmoid',\n                kernelInitializer: 'leCunNormal'\n            })\n        );\n        regressionModel.add(\n            tf.layers.dense({\n                units : 50,\n                activation : 'sigmoid',\n                kernelInitializer : 'leCunNormal'\n            })\n        );\n        regressionModel.add(\n            tf.layers.dense({\n                units : numOutputLabels\n            })\n        );\n        regressionModel.compile({\n            optimizer : tf.train.sgd(0.01),\n            loss : 'meanSquaredError'\n        });\n        return regressionModel;\n    }\n\n\n    _getModelDbLocation (projectid) {\n        return 'indexeddb://ml4k-models-regression-' + projectid.toString().replaceAll('-', '');\n    }\n\n    _loadModel (projectid) {\n        console.log('[mlforkids] ML4KidsRegressionTraining loading model from browser storage');\n        var loaded = false;\n        if (this.PROJECTS[projectid].project.normalization) {\n            const savelocation = this._getModelDbLocation(projectid);\n            return tf.loadLayersModel(savelocation)\n                .then((storedModelInfo) => {\n                    // TODO compare model with project info to check size is consistent\n                    if (storedModelInfo) {\n                        this.PROJECTS[projectid].normalization = {\n                            mean : tf.tensor(this.PROJECTS[projectid].project.normalization.mean),\n                            standardDeviation : tf.tensor(this.PROJECTS[projectid].project.normalization.standardDeviation)\n                        };\n                        this.PROJECTS[projectid].model = storedModelInfo.output;\n                        loaded = true;\n                    }\n\n                    return loaded;\n                })\n                .catch((err) => {\n                    console.log('[mlforkids] ML4KidsRegressionTraining failed to load model from storage', err);\n                    return loaded;\n                });\n        }\n        else {\n            return Promise.resolve(loaded);\n        }\n    }\n\n    _saveModel (projectid) {\n        console.log('[mlforkids] ML4KidsRegressionTraining saving model to browser storage');\n        const savelocation = this._getModelDbLocation(projectid);\n        return this.PROJECTS[projectid].model.save(savelocation)\n            .then((results) => {\n                console.log('[mlforkids] ML4KidsRegressionTraining saved model', savelocation, results);\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsRegressionTraining failed to save model', err);\n            });\n    }\n\n\n    _watchForNewModels (projectid, worker) {\n        if (!this.PROJECTS[projectid].modelWatcher) {\n            console.log('[mlforkids] ML4KidsRegressionTraining listening for model updates', projectid);\n            this.PROJECTS[projectid].modelWatcher = true;\n\n            const modellocation = this._getModelDbLocation(projectid);\n            this._storageSupport.registerForModelStorageUpdates(modellocation, () => {\n                console.log('[mlforkids] ML4KidsRegressionTraining new model was trained');\n\n                worker.postMessage({\n                    mlforkidsregression: 'modelretrain',\n                    data: { projectid : projectid.toString() }\n                });\n            });\n        }\n    }\n}\n\nmodule.exports = ML4KidsRegressionTraining;","class ML4KidsSoundTraining {\n\n    // states:\n    //   INIT - not ready yet\n    //   READY - ready for training\n    //   TRAINING - training in progress\n    //   TRAINED - ML model ready for use\n    //   LISTENING - ML model being used\n    //   ERROR - something went wrong\n\n    constructor (storageSupport) {\n        this.state = 'INIT';\n        this.usingRestoredModel = false;\n        this._storageSupport = storageSupport;\n    }\n\n    init (encprojectdata, worker) {\n        // TODO this will break if there are multiple sound extensions open in Scratch - use multi-project approach from image-support class\n\n        if (typeof encprojectdata === 'string') {\n            if (encprojectdata[0] === '{') {\n                // additional info for using indexeddb to store/load models\n                const projectData = JSON.parse(encprojectdata);\n                this.mlprojectid = projectData.projectid;\n                this.mlprojectlabels = projectData.labels;\n                this.mlprojectlabels.unshift('_background_noise_');\n            }\n            else {\n                // project id only means new models can be created only\n                this.mlprojectid = encprojectdata;\n            }\n        }\n        else {\n            // additional info for using indexeddb to store/load models\n            this.mlprojectid = encprojectdata.projectid;\n            this.mlprojectlabels = encprojectdata.labels;\n            this.mlprojectlabels.unshift('_background_noise_');\n        }\n\n        tf.enableProdMode();\n\n        this.stopListening = this.stopListening.bind(this);\n        window.addEventListener('mlforkids-runtime-project-stop-all', this.stopListening);\n\n        return this.loadSpeechCommands()\n            .then(() => {\n                return this.initSoundSupport(true, worker);\n            // })\n            // .then(() => {\n            //     this._watchForNewModels(this.mlprojectid);\n            });\n    }\n\n\n    loadSpeechCommands () {\n        const scriptid = 'mlforkids-script-speechcommands';\n        const scripturl = 'https://machinelearningforkids.co.uk' +\n                                '/static/bower_components' +\n                                '/tensorflow-models/speech-commands-scratch' +\n                                '/speech-commands.min.js?v=117';\n        return new Promise((resolve, reject) => {\n            if (document.getElementById(scriptid)) {\n                return resolve();\n            }\n            else {\n                const scriptObj = document.createElement('script');\n                scriptObj.id = scriptid;\n                scriptObj.type = 'text/javascript';\n                scriptObj.src = scripturl;\n                scriptObj.onload = resolve;\n                scriptObj.onError = reject;\n\n                document.head.appendChild(scriptObj);\n            }\n        });\n    }\n\n\n    prepareSoundService (worker) {\n        if (this.usingRestoredModel) {\n            // models restored from indexeddb don't have the base layers needed\n            //  to train a new model, so we need to start from scratch\n            console.log('[mlforkids] Setting up new transfer learning model');\n            return this.initSoundSupport(false, worker);\n        }\n        else {\n            // we aren't using a model restored from indexeddb so we should\n            //  have everything we need already in place to train a new model\n            return Promise.resolve();\n        }\n    }\n\n\n    initSoundSupport(loadModelIfAvailable, worker) {\n        const siteUrl = 'https://machinelearningforkids.co.uk' +\n                            '/static/bower_components' +\n                            '/tensorflow-models/speech-commands-scratch';\n        const vocab = null;\n        const modelJson = siteUrl + '/model.json';\n        const metadataJson = siteUrl + '/metadata.json';\n\n        console.log('[mlforkids] Creating base recognizer');\n        const baseRecognizer = speechCommands.create('BROWSER_FFT', vocab, modelJson, metadataJson);\n        return baseRecognizer.ensureModelLoaded()\n            .then(() => {\n                console.log('[mlforkids] Creating transfer learning model');\n                this.transferRecognizer = baseRecognizer.createTransfer('project-' + this.mlprojectid);\n                const modelInfo = this.transferRecognizer.modelInputShape();\n                this.transferModelInfo = {\n                    numFrames : modelInfo[1],\n                    fftSize : modelInfo[2]\n                };\n\n                if (loadModelIfAvailable) {\n                    return this._loadModel(this.mlprojectid, this.mlprojectlabels, worker);\n                }\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsSoundTraining failed init', err);\n\n                this.state = 'ERROR';\n\n                if (worker) {\n                    worker.postMessage({\n                        mlforkidssound: 'modelfailed'\n                    });\n                }\n            });\n    }\n\n\n\n    trainNewModelLocal (projectinfo, worker) {\n        const projectid = projectinfo.projectid;\n\n        const that = this;\n        return this._storageSupport.getTrainingData(projectid)\n            .then((data) => {\n                return that.trainNewModel(data, worker);\n            });\n    }\n\n\n\n    trainNewModel (data, worker) {\n        if (this.state === 'LISTENING') {\n            this.stopListening();\n        }\n        if (this.state !== 'READY' && this.state !== 'TRAINED') {\n            console.log('[mlforkids] ML4KidsSoundTraining not ready to train a new ML model - state : ' + this.state);\n            return;\n        }\n\n        this.state = 'TRAINING';\n\n        return this.prepareSoundService(worker)\n            .then(() => {\n                this.transferRecognizer.dataset.clear();\n                this.transferRecognizer.dataset.label2Ids = {};\n                this.transferRecognizer.words = null;\n\n                for (var i = 0; i < data.length; i++) {\n                    var trainingdataitem = data[i];\n                    this.transferRecognizer.dataset.addExample({\n                        label : trainingdataitem.label,\n                        spectrogram : {\n                            frameSize : this.transferModelInfo.fftSize,\n                            data : new Float32Array(trainingdataitem.audiodata)\n                        }\n                    });\n                }\n\n                this.transferRecognizer.collateTransferWords();\n\n                return tf.nextFrame();\n            })\n            .then(() => {\n                return this.transferRecognizer.train({epochs: 100});\n            })\n            .then(() => {\n                this.state = 'TRAINED';\n                this.usingRestoredModel = false;\n                return this._saveModel(this.mlprojectid);\n            })\n            .then(() => {\n                worker.postMessage({\n                    mlforkidssound: 'modelready'\n                });\n            })\n            .catch((err) => {\n                this.state = 'ERROR';\n\n                worker.postMessage({\n                    mlforkidssound: 'modelfailed'\n                });\n\n                console.log('[mlforkids] ML4KidsSoundTraining model training failed');\n                console.log(err);\n            });\n    }\n\n\n    startListening (worker) {\n        if (this.state !== 'TRAINED') {\n            console.log('[mlforkids] ML4KidsSoundTraining not ready to listen - state : ' + this.state);\n            return;\n        }\n\n        console.log('[mlforkids] startListening');\n\n        try {\n            var that = this;\n            this.transferRecognizer.listen((result) => {\n                var matches = [];\n                var labels = that.transferRecognizer.wordLabels();\n                for (var i = 0; i < result.scores.length; i++) {\n                    matches.push({\n                        class_name : labels[i],\n                        confidence : result.scores[i] * 100\n                    });\n                }\n\n                matches.sort((a, b) => {\n                    return b.confidence - a.confidence;\n                });\n\n                worker.postMessage({\n                    mlforkidssound : 'recognized',\n                    data : matches\n                });\n            }, {\n                probabilityThreshold : 0.70\n            });\n\n            this.state = 'LISTENING';\n        }\n        catch (err) {\n            this.state = 'ERROR';\n\n            console.log('[mlforkids] ML4KidsSoundTraining failed to start listening');\n            console.log(err);\n        }\n    }\n\n\n\n    stopListening () {\n        if (this.state !== 'LISTENING') {\n            console.log('[mlforkids] ML4KidsSoundTraining not listening - state : ' + this.state);\n            return;\n        }\n\n        console.log('[mlforkids] stopListening');\n\n        try {\n            this.transferRecognizer.stopListening();\n            this.state = 'TRAINED';\n        }\n        catch (err) {\n            this.state = 'ERROR';\n\n            console.log('[mlforkids] ML4KidsSoundTraining failed to start listening');\n            console.log(err);\n        }\n    }\n\n\n    _getModelDbLocation (projectid) {\n        return 'indexeddb://ml4k-models-sounds-' + projectid.toString().replaceAll('-', '');\n    }\n\n    _saveModel (projectid) {\n        console.log('[mlforkids] ML4KidsSoundTraining saving model to browser storage');\n        var savelocation = this._getModelDbLocation(projectid);\n        this.transferRecognizer.save(savelocation)\n            .then((r) => {\n                console.log('[mlforkids] ML4KidsSoundTraining saved model', r);\n                this._storeModelSavedDate(savelocation);\n            })\n            .catch((err) => {\n                console.log('[mlforkids] ML4KidsSoundTraining failed to save model', err);\n            });\n    }\n    _storeModelSavedDate (modelid) {\n        try {\n            if (window.localStorage) {\n                window.localStorage.setItem(modelid, Date.now());\n            }\n        }\n        catch (err) {\n            console.log('[mlforkids] ML4KidsSoundTraining unable to save model date');\n        }\n    }\n\n    _loadModel (projectid, labels, worker) {\n        if (labels) {\n            console.log('[mlforkids] ML4KidsSoundTraining loading model from browser storage');\n            var savelocation = this._getModelDbLocation(projectid);\n            return this.transferRecognizer.load(savelocation)\n                .then(() => {\n                    this.transferRecognizer.words = Array.from(labels).sort();\n                    console.log('[mlforkids] ML4KidsSoundTraining loaded model from storage');\n                    this.state = 'TRAINED';\n                    this.usingRestoredModel = true;\n\n                    if (worker) {\n                        worker.postMessage({\n                            mlforkidssound: 'modelready'\n                        });\n                    }\n                })\n                .catch((err) => {\n                    console.log('[mlforkids] ML4KidsSoundTraining failed to load model from storage', err);\n                    this.state = 'READY';\n\n                    if (worker) {\n                        worker.postMessage({\n                            mlforkidssound: 'modelinit'\n                        });\n                    }\n                });\n        }\n        else {\n            console.log('[mlforkids] ML4KidsSoundTraining unable to restore model from storage');\n            this.state = 'READY';\n        }\n    }\n\n\n    // TODO - too risky for now... need to consider things like:\n    //   - what if the transferRecognizer is currently listening? do we need to stop listening first? notify extensions?\n    // _watchForNewModels (projectid) {\n    //     if (!this.modelWatcher) {\n    //         console.log('[mlforkids] ML4KidsSoundTraining listening for model updates', projectid);\n    //         this.modelWatcher = true;\n    //\n    //         const modellocation = this._getModelDbLocation(projectid);\n    //         window.addEventListener('storage', (evt) => {\n    //             if (evt.key === modellocation) {\n    //                 console.log('[mlforkids] ML4KidsSoundTraining new model is available');\n    //                 return this._loadModel(projectid, this.mlprojectlabels);\n    //             }\n    //         });\n    //     }\n    // }\n}\n\nmodule.exports = ML4KidsSoundTraining;\n","class ML4KidsLocalStorage {\n\n    constructor () {\n        this.ml4kStorageIFrameHost = 'https://machinelearningforkids.co.uk';\n        this.ml4kStorageIFrameWindow = document.getElementById('mlforkids-data-worker').contentWindow;\n\n        this.ml4kStorageInflightRequests = {};\n        this.ml4kNextStorageRequestId = 1;\n\n        // this.ml4kStorageReady = false;\n        // this.ml4kPendingRequests = [];\n\n\n        const _that = this;\n        window.addEventListener('message', function (event) {\n            if (event.origin !== _that.ml4kStorageIFrameHost) {\n                return;\n            }\n            // else if (event.data.command === 'request-storage-access') {\n            //     window.dispatchEvent(new Event('mlforkids-request-storage-access'));\n            // }\n            // else if (event.data.command === 'storage-access-verified') {\n            //     _that.ml4kStorageReady = true;\n            //     console.log('TODO : worked - hide the banner');\n\n            //     while (_that.ml4kPendingRequests.length > 0) {\n            //         const pendingMessage = _that.ml4kPendingRequests.shift();\n            //         _that.ml4kStorageIFrameWindow.postMessage(pendingMessage, _that.ml4kStorageIFrameHost);\n            //     }\n            // }\n            // else {\n            const inflightRequest = _that.ml4kStorageInflightRequests[event.data.correlId];\n            if (inflightRequest) {\n                if (inflightRequest.callback) {\n                    // callback function - can be called multiple times\n                    inflightRequest.callback();\n                }\n                else {\n                    // persisted promise - called once only then deleted\n                    if (event.data.output) {\n                        inflightRequest.resolve(event.data.output);\n                    }\n                    else {\n                        inflightRequest.reject(event.data.err);\n                    }\n                    delete _that.ml4kStorageInflightRequests[event.data.correlId];\n                }\n            }\n            // }\n        });\n\n        // document.getElementById('mlforkids-request-storage-access').addEventListener('click', function () {\n        //     _that.ml4kStorageIFrameWindow.postMessage({ fn : 'requestStorageAccess' }, _that.ml4kStorageIFrameHost);\n        // });\n        // this.ml4kStorageIFrameWindow.postMessage({ fn : 'verifyStorageAccess' }, this.ml4kStorageIFrameHost);\n    }\n\n    _submitMl4kStorageRequest (functionName, requestArgs) {\n        const correlId = (this.ml4kNextStorageRequestId++);\n        const message = {\n            correlId,\n            fn: functionName,\n            args: requestArgs\n        };\n        const _that = this;\n        const inflightRequest = new Promise(function (resolve, reject) {\n            _that.ml4kStorageInflightRequests[correlId] = {\n                resolve, reject\n            };\n        });\n\n        // if (this.ml4kStorageReady) {\n        //     // send immediately\n            this.ml4kStorageIFrameWindow.postMessage(message, this.ml4kStorageIFrameHost);\n        // }\n        // else {\n        //     // queue until user has granted storage access\n        //     this.ml4kPendingRequests.push(message);\n        // }\n\n        return inflightRequest;\n    }\n\n\n    getProjects () {\n        return this._submitMl4kStorageRequest('getProjects', []);\n    }\n    getProject (projectid) {\n        return this._submitMl4kStorageRequest('getProject', [projectid]);\n    }\n    getTrainingData (projectid) {\n        return this._submitMl4kStorageRequest('getTrainingData', [projectid]);\n    }\n    addTrainingData (projectid, trainingobject) {\n        return this._submitMl4kStorageRequest('addTrainingData', [projectid, trainingobject]);\n    }\n\n\n    getTrainingForWatsonAssistant (project) {\n        return this.getTrainingData(project.id)\n            .then((allTraining) => {\n                const trainingByLabel = {};\n\n                for (const item of allTraining) {\n                    const label = item.label;\n                    const text = item.textdata;\n\n                    if (!(label in trainingByLabel)) {\n                        trainingByLabel[label] = {\n                            intent : label.replace(/\\s/g, '_'),\n                            examples : []\n                        };\n                    }\n                    trainingByLabel[label].examples.push({ text });\n                }\n\n                return {\n                    name : project.name,\n                    language : project.language ? project.language : 'en',\n                    intents : Object.values(trainingByLabel),\n                    dialog_nodes : [],\n                    counterexamples: [],\n                    entities : [],\n                    metadata : {\n                        createdby : 'machinelearningforkids',\n                    },\n                };\n            });\n    }\n\n\n    storeBase64EncodedImage (projectid, label, b64imgdata) {\n        const _that = this;\n        return fetch(`data:image/jpeg;base64,${b64imgdata}`)\n            .then((converted) => {\n                return converted.blob();\n            })\n            .then((imagedata) => {\n                _that.addTrainingData(projectid, {\n                    imagedata,\n                    label: label,\n                    isstored: true\n                });\n            });\n    }\n\n\n    registerForModelStorageUpdates (modelid, callback) {\n        const correlId = (this.ml4kNextStorageRequestId++);\n        const message = {\n            correlId,\n            fn: 'registerForModelStorageUpdates',\n            args: [ modelid ]\n        };\n        this.ml4kStorageInflightRequests[correlId] = { callback };\n        this.ml4kStorageIFrameWindow.postMessage(message, this.ml4kStorageIFrameHost);\n    }\n}\n\nmodule.exports = ML4KidsLocalStorage;","class ML4KidsTensorFlow {\n\n    // This component needs to support multiple instances of the model\n    //  extension being used at once, so all state and models are\n    //  indexed by a unique request id\n\n    // PROJECTS[projectid].modelClasses = <label1/label2/label3/...>\n    // PROJECTS[projectid].modelNumClasses = <number of modelClasses>\n    // PROJECTS[projectid].dataType = teachablemachineimage\n    // PROJECTS[projectid].state = INIT/READY/TRAINED/ERROR\n    // PROJECTS[projectid].model = <model>\n\n    // states:\n    //   INIT - not ready yet\n    //   READY - ready for training\n    //   TRAINED - ML model ready for use\n    //   ERROR - something went wrong\n\n    constructor () {\n        this.PROJECTS = {};\n        this.state = 'INIT';\n        tf.enableProdMode();\n    }\n\n    // encprojectdata\n    // JSON.stringify-ed version of\n    //   { projectid : someprojectid, labels : [ labelA, labelB, labelC ], dataType : IMAGE, modelurl : http://somedomain... }\n    initProject (encprojectdata, worker) {\n        const projectData = JSON.parse(encprojectdata);\n        const projectid = projectData.projectid;\n        let modellocation = projectData.modelurl;\n\n        console.log('[mlforkids] Initializing project', projectid, projectData);\n\n        this.PROJECTS[projectid] = {};\n        this.PROJECTS[projectid].state = 'INIT';\n        this.PROJECTS[projectid].modelClasses = projectData.labels;\n        this.PROJECTS[projectid].modelNumClasses = projectData.labels.length;\n        this.PROJECTS[projectid].dataType = projectData.dataType;\n\n        let loadModelPromise;\n        if (this.PROJECTS[projectid].dataType === 'graphdefimage') {\n            const loadModelOptions = {};\n            if (modellocation.startsWith('https://tfhub.dev')) {\n                loadModelOptions.fromTFHub = true;\n            }\n            if (this.urlEndsWith(modellocation, '/model.json')) {\n                modellocation = modellocation.substr(0, modellocation.length - '/model.json'.length);\n            }\n            console.log('[mlforkids] loading graph model', modellocation, loadModelOptions);\n            loadModelPromise = tf.loadGraphModel(modellocation, loadModelOptions);\n        }\n        else if (this.PROJECTS[projectid].dataType === 'teachablemachinepose') {\n            console.log('[mlforkids] loading pose model iframe');\n            loadModelPromise = this._loadPoseModelSupport()\n                .then((iframe) => {\n                    this.teachableMachinePoseIframe = iframe;\n                    const metadataJsonUrl = modellocation.replace(/model\\.json$/, 'metadata.json');\n                    return iframe.contentWindow.initModel(projectid, modellocation, metadataJsonUrl);\n                });\n        }\n        else {\n            console.log('[mlforkids] loading layers model', modellocation);\n            loadModelPromise = tf.loadLayersModel(modellocation);\n        }\n        return loadModelPromise.then((model) => {\n            this.PROJECTS[projectid].model = model;\n            this.PROJECTS[projectid].state = 'TRAINED';\n\n            worker.postMessage({\n                mlforkidstensorflow: 'modelready',\n                data: { projectid : projectid }\n            });\n        })\n        .catch((err) => {\n            console.log('[mlforkids] ML4KidsTensorFlow failed init', err);\n            this.PROJECTS[projectid].state = 'ERROR';\n\n            worker.postMessage({\n                mlforkidstensorflow: 'modelfailed',\n                data: { projectid : projectid }\n            });\n        });\n    }\n\n    urlEndsWith(urlToCheck, stringToCheck) {\n        return urlToCheck.length === (urlToCheck.indexOf(stringToCheck) + stringToCheck.length);\n    }\n\n    sortByConfidence (a, b) {\n        if (a.confidence < b.confidence) {\n            return 1;\n        }\n        else if (a.confidence > b.confidence) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    // encrequest\n    // JSON.stringify-ed version of\n    //   { projectid : projectId, requestid : requestId, requestdata : somethingtouse }\n    classifyData (encrequest, worker) {\n        const requestData = JSON.parse(encrequest);\n        const projectid = requestData.projectid;\n        const requestid = requestData.requestid;\n\n        return this._prepareDataForClassification(projectid, requestData.requestdata)\n            .then((dataToClassify) => {\n                if (this.PROJECTS[projectid].dataType === 'teachablemachinepose') {\n                    return this.teachableMachinePoseIframe.contentWindow.predict(projectid, dataToClassify);\n                }\n                else {\n                    return this.PROJECTS[projectid].model.predict(dataToClassify).data();\n                }\n            })\n            .then((output) => {\n                let matches;\n                if (this.PROJECTS[projectid].dataType === 'teachablemachinepose') {\n                    matches = output.sort(this.sortByConfidence);\n                }\n                else {\n                    if (this.PROJECTS[projectid].modelNumClasses > 0) {\n                        matches = this.PROJECTS[projectid].modelClasses.map((label, idx) => {\n                            return {\n                                class_name : label,\n                                confidence : 100 * output[idx]\n                            };\n                        }).sort(this.sortByConfidence);\n                    }\n                    else {\n                        // label names aren't known, so we just have to refer to them by idx\n                        const anonScores = new Array(output.length);\n                        for (let idx = 0; idx < output.length; idx++) {\n                            anonScores[idx] = {\n                                class_name : 'label ' + idx,\n                                confidence : 100 * output[idx]\n                            };\n                        }\n                        matches = anonScores.sort(this.sortByConfidence);\n                    }\n                }\n\n                return worker.postMessage({\n                    mlforkidstensorflow: 'classifyresponse',\n                    data: { projectid : projectid, requestid : requestid, matches : matches }\n                });\n            })\n            .catch((err) => {\n                if (err) {\n                    console.log('[mlforkids] ML4KidsTensorFlow error', err);\n                }\n                return worker.postMessage({\n                    mlforkidstensorflow: 'classifyresponse',\n                    data: { projectid : projectid, requestid : requestid }\n                });\n            });\n    }\n\n\n    _prepareDataForClassification (projectid, classifydata) {\n        return new Promise((resolve, reject) => {\n            if (projectid in this.PROJECTS) {\n                if (this.PROJECTS[projectid].state !== 'TRAINED') {\n                    console.log('[mlforkids] ML4KidsTensorFlow received classify request before a model is ready');\n                    return reject();\n                }\n\n                if (this.PROJECTS[projectid].dataType === 'teachablemachineimage' ||\n                    this.PROJECTS[projectid].dataType === 'graphdefimage')\n                {\n                    const imageElement = document.createElement('img');\n                    imageElement.width = 224;\n                    imageElement.height = 224;\n                    imageElement.onerror = (err) => {\n                        console.log('[mlforkids] ML4KidsTensorFlow failed to prepare image data for prediction', err);\n                        return reject();\n                    };\n                    imageElement.onload = () => {\n                        return resolve(tf.tidy(() => {\n                            return tf.browser.fromPixels(imageElement)\n                                .expandDims(0)\n                                .toFloat()\n                                .div(127)\n                                .sub(1);\n                        }));\n                    };\n                    imageElement.src = 'data:image/jpeg;base64,' + classifydata;\n                }\n                else if (this.PROJECTS[projectid].dataType === 'teachablemachinepose')\n                {\n                    this.teachableMachinePoseIframe.contentWindow.createImage(classifydata, resolve);\n                }\n                else {\n                    return resolve(classifydata);\n                }\n            }\n            else {\n                console.log('[mlforkids] ML4KidsTensorFlow received request for unknown project');\n                return reject();\n            }\n        });\n    }\n\n\n    _loadPoseModelSupport() {\n        return new Promise((resolve) => {\n            var id = 'mlforkids-iframe-posenet';\n            var iframeObj = document.getElementById(id);\n            if (iframeObj) {\n                console.log('[mlforkids] Posenet already loaded');\n                resolve(iframeObj);\n            }\n            else {\n                console.log('[mlforkids] loading posenet');\n\n                iframeObj = document.createElement('iframe');\n                iframeObj.id = id;\n                iframeObj.type = 'text/javascript';\n                iframeObj.src = 'teachablemachinepose.html';\n\n                iframeObj.onload = () => { resolve(iframeObj); };\n\n                document.head.appendChild(iframeObj);\n            }\n        });\n    }\n\n}\n\nmodule.exports = ML4KidsTensorFlow;\n","const minilog = require('minilog');\nminilog.enable();\n\nmodule.exports = minilog('vm');\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAgBA;AACA;AAAA;AAAA;AACA;AAAA;AAHA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AChZA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AChtBA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;ACncA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;AC1RA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;AC3VA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;AC/JA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;ACxOA;AACA;AAEA;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}